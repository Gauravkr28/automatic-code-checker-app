name: CI/CD Pipeline - CodeChecker

on:
  push:
    branches:
      - main # Triggers on push to the main branch
  pull_request:
    branches:
      - main # Triggers on pull requests targeting the main branch

jobs:
  build-and-test-backend:
    runs-on: ubuntu-latest # Specifies the runner environment
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Action to check out your repository code

    - name: Set up Node.js for backend
      uses: actions/setup-node@v4 # Action to set up Node.js environment
      with:
        node-version: '20' # Specify Node.js version
        cache: 'npm' # Cache npm dependencies
        cache-dependency-path: 'backend/package-lock.json' # Path to lock file for caching

    - name: Install backend dependencies
      run: npm install --prefix backend # Install dependencies only for the backend directory

    - name: Run backend ESLint
      # This step runs ESLint. If linting fails, the job will fail.
      # Ensure your backend/.eslintrc.json is configured as desired.
      run: npm run lint --prefix backend

    - name: Run backend tests
      # Now running the actual test script defined in backend/package.json
      run: npm test --prefix backend

    - name: Build backend Docker image
      # Builds the Docker image for the backend using the Dockerfile in ./backend
      run: docker build -t code-checker-backend:latest ./backend

    # SonarQube Scan (Conceptual - requires SonarQube server and secrets)
    # This step would typically push analysis results to a SonarQube server.
    # You'd need a SonarQube server URL, project key, and token configured in your GitHub secrets.
    # To enable: uncomment, replace 'your-sonar-project-key-backend', and set up SONAR_TOKEN secret.
    # - name: SonarQube Scan
    #   uses: SonarSource/sonarcloud-github-action@master
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #   with:
    #     projectKey: 'your-sonar-project-key-backend'
    #     baseDir: './backend' # Or './' for the whole repo

  build-and-test-frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js for frontend
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Install frontend dependencies
      run: npm install --prefix frontend

    - name: Run frontend ESLint
      # This step runs ESLint for the frontend.
      run: npm run lint --prefix frontend

    - name: Run frontend tests
      # Now running the actual test script defined in frontend/package.json
      run: npm test --prefix frontend

    - name: Build frontend Docker image
      # Builds the Docker image for the frontend using the Dockerfile in ./frontend
      run: docker build -t code-checker-frontend:latest ./frontend

  # Deployment jobs (These need real deployment logic)
  # They depend on the successful completion of build-and-test jobs.
  deploy-backend:
    needs: build-and-test-backend # This job runs only after backend build/test is successful
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Only deploy when pushing to 'main' branch
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Docker Hub
      # This uses a GitHub Action specifically for Docker login
      uses: docker/login-action@v3
      with:
        username: gauravkr28
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Tag and Push Backend Docker Image
      # Replace 'your-dockerhub-username' with your actual Docker Hub username
      run: |
        docker tag code-checker-backend:latest your-dockerhub-username/code-checker-backend:latest
        docker push your-dockerhub-username/code-checker-backend:latest

    - name: Deploy to Render
      # This step uses the Render CLI, which needs to be installed in the CI environment.
      # Make sure to install `@renderinc/cli` and set up the RENDER_API_KEY secret.
      # You'd typically install it globally in a previous step or use a pre-built action.
      # For simplicity, we'll install it inline for this example.
      run: |
        npm install -g @renderinc/cli
        render deploy --serviceId ${{ secrets.RENDER_BACKEND_SERVICE_ID }} --apiKey ${{ secrets.RENDER_API_KEY }}
      env:
        # RENDER_API_KEY will be automatically passed to the 'render' command
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }} # Ensure this secret is set in GitHub

  deploy-frontend:
    needs: build-and-test-frontend # This job runs only after frontend build/test is successful
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Only deploy when pushing to 'main' branch
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Vercel CLI
      run: npm install -g vercel # Install Vercel CLI in the runner

    - name: Deploy to Vercel
      # You'd need Vercel API token and org/project IDs in secrets.
      # Ensure frontend build directory exists (default is 'build' for Create React App)
      # The 'vercel' command automatically deploys the 'build' folder.
      # To enable: uncomment the vercel commands and set up VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID secrets.
      run: |
        vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}
      env: # Environment variables for Vercel CLI
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
